#!/usr/bin/env python
#
# GLOSS -- Grep for Logs on Open Source Systems
#
# Parse the lines in log files, and perform selections on them to
# bind variables, selecting on some and outputting others, to
# create queries and to present in an appetiting manner.
#
# A typical use would be a Postfix MTA, which logs many things about
# messages, with transaction identities and email addresses, that can
# be very useful when wrapped into clickable web pages.
#
# Drivers mention variables by name.  They are resolved in this order:
#  - within an explicit scope, when given
#  - within the current driver's scope
#  - within the surrounding log entry scope
# Variables of drivers are prefixed by the driver name; variables of
# GLOSS itself are not prefixed.
#
# From: Rick van Rein <rick@openfortress.nl>


import os
import sys
import time

import re
import argparse

import csv


#
# Commandline argument parser
#

argprs = argparse.ArgumentParser (prog="GLOSS",
		usage="Grep Logs on Open Source Systems -- helps to gloss over logs",
		description="Log files are long and detailed; this tool structures their contents and helps to relate matching identifier fields",
		add_help=False)

argprs.add_argument ('-f', '--logfile',
		default=None,
		action='append',
		help='explicit specification of a logfile to gloss over; may specify more than one; defaults are introduced by most --driver specifications; in absense of those, /var/log/syslog and /var/log/messages are used')

argprs.add_argument ('-j', '--journal',
		type=str,
		default=None,
		help='reserved to access systemd journals')

argprs.add_argument ('-l', '--log-facility',
		type=str,
		default='*.*',
		action='append',
		help='log facility; used to find references in syslog.conf')

argprs.add_argument ('-a', '--after',
		type=str,
		default=None,
		help='select events at or after this time; may be an integer timestamp, a date, a time with or without seconds (ranging back 24h), or a week day (ranging back at most 6 days); non-overlapping combinations of words are permitted; specifying this as well as --before can speed up selection')

argprs.add_argument ('-b', '--before',
		type=str,
		default=None,
		help='select events at or before this time; may be an integer timestamp, a date, a time with or without seconds (ranging back 24h), or a week day (ranging back at most 6 days); non-overlapping combinations of words are permitte; specifying this as well as --after can speed up selectiond')

argprs.add_argument ('-p', '--pid', '--proc',
		type=str,
		default=[],
		action='append',
		help='set a PID;maybe a path to a file holding a PID; may be a tcp:port or udp:port or sctp:port; may be a program name to match')

argprs.add_argument ('-h', '--hostname',
		type=str,
		default=None,
		action='append',
		help='for the logging host name, as represented in the log files; defaults to match all hosts; multiple hosts can be presented as explicit alternatives')

argprs.add_argument ('-d', '--driver',
		type=str,
		default=None,
		action='append',
		help='for a driver; may be used to recognise a program\'s specific log file formatting; a directory holds a file with these drivers, and programs can install their data in here as a modular extension; these modules define similar parameters to the above to select whether they might apply, and then still they may fail; drivers may share variables and/or specify aliases in other drivers; there is a special driver named "pass" that will match any free form, which by default would not have passed; drivers are applied in the order of occurrence in these options')

argprs.add_argument ('-m', '--mode',
		type=str,	#TODO# is a URL best to specify modes (with parameters)?
		default=None,
		help='run in another mode than the default output to stdout or pager; specify an http URI for an HTTP server; the authority part may be a localhost port, an address:port; or use a UNIX domain socket, or ssh: for an SSH subsystem')

argprs.add_argument ('-e', '--encoding',
		type=str,
		default='text',	#TODO# Dependent on --mode perhaps?
		choices=['text','vars','html','csv'],
		help='code the output in a particular manner; html is an option, and so are csv and vars; default is text for plain text display of selected lines from the log files')

argprs.add_argument ('-s', '--select',
		type=str,
		action='append',
		help='select one or more variables to display as they occur in the various lines of text; by default, all variables are shown; when multiple variables are used, they may be mentioned individually and/or separated by equals signs')

argprs.add_argument ('-where', '--where',
		type=str,
		default=[],
		action='append',
		help='apply a where-clause selection, requiring a pattern for a line that binds the given variable to the following value (after an = sign for a match or != for a non-match); multiple criteria may be entered to further constrain the selection')

argprs.add_argument ('-o', '--or',
		action='append_const',
		const=['OR'],
		dest='where',
		help='or-separation between where-clauses, which are normally conjugated; not that the combination and the lowest-level negation through != or = allows the expression of any logical combination')

argprs.add_argument ('-r', '--regexp',
		type=str,
		default=None,
		action='append',
		help='require free-form regexp in the line\'s freeform text')

argprs.add_argument ('-t', '--tail',
		action='store_true',
		help='tail on the log sources and see develop (where possible)')

argprs.add_argument ('-v', '--verbose',
		action="count",
		help='increase verbosity: suggest files that match the criteria; report when drivers miss lines that they would have liked to match; show log entries with variables explicitly marked inline')

# argprs.add_argument ('--help',
# 		action='store_true',
# 		help='show this information')

#NASTY# There must always be exactly one logfile when done this way
#NASTY# argprs.add_argument ('logfile',
#NASTY# 		default=None,
#NASTY# 		action='store',
#NASTY# 		help='explicit specification of logfile to gloss over; may specify more than one; defaults are introduced by most --driver specifications; in absense of those, /var/log/syslog and /var/log/messages are used')



#
# Output variant
#

def output_text_open (fh, var_names):
	hdl = fh
	return hdl

def output_text_line (hdl, var_names, linevars):
	hdl.write (linevars ['logline'])

def output_text_done (hdl):
	pass



def output_vars_open (fh, var_names):
	hdl = fh
	return hdl

def output_vars_line (hdl, var_names, linevars):
	for var in var_names:
		if linevars [var] is not None:
			hdl.write (var + '=' + linevars [var] + '\n')
		else:
			hdl.write (var + ' is None\n')
	hdl.write ('\n')

def output_vars_done (hdl):
	pass



def output_html_open (fh, var_names):
	hdl = fh
	hdl.write ('<html>\n<body>\n')
	hdl.write ('<form>\n')
	for whr in args.where:
		try:
			(var,val) = whr.split ('=', 1)
			hdl.write ('<input type=checkbox name="where_' + var + '" checked/> ' + var + ' = <input type=text name="' + var + '" value="' + val + '"/><br/>\n')
		except:
			pass
	hdl.write ('<input type=submit value=" Query &gt;&gt; "/><br/>\n')
	for var in ky_logline:
		hdl.write ('<input type=checkbox name="select" value="' + var + '"' + (' checked' if var in args.select else '') + '"/>' + var + ' ')
	hdl.write ('<br/>\n')
	hdl.write ('</form>\n')
	hdl.write ('<table>\n')
	return hdl

def output_html_line (hdl, var_names, linevars):
	hdl.write ('<tr>' +
		''.join ([ '<td><a href="/?' + var + '=' + linevars [var] + '">' + (linevars [var] or '&nbsp;') + '</a></td>'
			for var in var_names ]) +
		'</tr>\n')

def output_html_done (hdl):
	hdl.write ('</table>\n</body>\n</html>\n')



def output_csv_open (fh, var_names):
	hdl = csv.writer (fh)
	row = [ var.upper() for var in var_names ]
	hdl.writerow (row)
	return hdl

def output_csv_line (hdl, var_names,linevars):
	row = [ linevars [var] for var in var_names ]
	hdl.writerow (row)

def output_csv_done (hdl):
	pass


#
# Modes of delivery
#

def wrmode_pager_open ():
	hdl = sys.stdout
	if os.isatty (hdl.fileno ()):
		pager = os.getenv ('PAGER', 'less')
		hdl = os.popen (pager, 'w')
	return hdl

def wrmode_pager_done (hdl):
	if not os.isatty (hdl.fileno ()):
		hdl.close ()

def wrmode_http_open ():
	#TODO# presumptious: html, lynx -- and this is not HTTP
	hdl = sys.stdout
	if os.isatty (hdl.fileno ()):
		#TODO# pager = os.getenv ('PAGER', 'less')
		pager = 'lynx -stdin'
		hdl = os.popen (pager, 'w')
	return hdl

def wrmode_http_done (hdl):
	if not os.isatty (hdl.fileno ()):
		hdl.close ()




#
# Interpret options, override defaults with more clever ones
#

if sys.argv [1:2] == ['--help']:
	argprs.print_help ()
	sys.exit (0)

warning = False

args = argprs.parse_args ()

#DEBUG# print 'Arguments:', args

if args.journal is not None:
	sys.stderr.write ('The --journal option is not yet supported\n')
	sys.exit (1)

if args.tail:
	sys.stderr.write ('The --tail option is not yet supported\n')
	sys.exit (1)

if args.logfile is None:
	if args.driver is None:
		args.logfile = [ '/var/log/syslog', '/var/log/messages' ]
	else:
		pass #TODO# args.logfile from drivers

if args.driver is None:
	pass #TODO# default drivers, maybe ["pass"]


if args.select is None:
	var_names = None
else:
	var_names = []
	for seln in args.select:
		for seln_elm in seln.split ('='):
			if seln_elm != '':
				var_names.append (seln_elm)

if args.encoding == 'csv':
	output_open = output_csv_open
	output_line = output_csv_line
	output_done = output_csv_done
elif args.encoding == 'html':
	output_open = output_html_open
	output_line = output_html_line
	output_done = output_html_done
elif args.encoding == 'vars':
	output_open = output_vars_open
	output_line = output_vars_line
	output_done = output_vars_done
else:
	output_open = output_text_open
	output_line = output_text_line
	output_done = output_text_done

if args.mode == 'http':
	#TODO# Again, presumptious, this is not HTTP at all
	wrmode_open = wrmode_http_open
	wrmode_done = wrmode_http_done
else:
	wrmode_open = wrmode_pager_open
	wrmode_done = wrmode_pager_done


conditions = []
for w in args.where:
	if w == ['OR']:
		conditions.append ( (None,None,None) )
	elif not '=' in w:
		sys.stderr.write ('Invalid where clause; use varname=value: ' + w + '\n')
		sys.exit (1)
	else:
		(wvar,wval) = w.split ('=', 1)
		same = True
		if wvar [-1:] == '!':
			wvar = wvar [:-1]
			same = False
		if wvar == '':
			sys.stderr.write ('You must supply a variable name in --where\n')
			sys.exit (1)
		conditions.append ( (wvar,wval,same) )

#
# Process time information (which is the most daunting cleverness)
#

weekdays = ['mon','tue','wed','thu','fri','sat','sun']
months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']

now = time.time ()
(now_yr,now_mo,now_dy,now_hr,now_mn,now_sc,now_wd,now_jd,now_ds) = now_tm = time.localtime (now)
re_numeric = re.compile ('[0-9]+')

# Return a pattern of integers [Year,Month,Day,Hour,Min,Sec]
# where integers may be set to None when unspecified, but
# only tailing; when something is not None then neither are
# preceding entries.  When unspecified, such preceding
# entries are set to find the most recent entry.
# The least specific return is filled with only None values.
#
def timevalue (arg):
	pattern = [None,None,None,None,None,None]
	if arg is None:
		return pattern
	if len (arg) >= 8 and re_numeric.match (arg):
		(yr,mo,dy,hr,mn,sc,wd,jd,ds) = time.localtime (int (arg))
		return [yr,mo,dy,hr,mn,sc]
	for argi in arg.split (' '):
		if ':' in argi:
			if pattern [3] or pattern [4] or pattern [5]:
				sys.stderr.write ('Multiple time specifications')
				sys.exit (1)
			hms = argi.split (':',2)
			try:
				pattern [3] = int (hms [0])
				if pattern [3] < 0 or pattern [3] > 23:
					raise Exception ('Bad hour')
				pattern [4] = int (hms [1])
				if pattern [4] < 0 or pattern [4] > 59:
					raise Exception ('Bad minutes')
				if len (hms) == 3:
					pattern [5] = int (hms [2])
					if pattern [5] < 0 or pattern [5] > 59:
						raise Exception ('Bad seconds')
			except Exception, e:
				sys.stderr.write ('Wrong time ' + argi + ' (' + str (e) + ')\n')
				sys.exit (1)
		elif len (argi) == 3 and argi.lower () in weekdays:
			if pattern [0] or pattern [1] or pattern [2]:
				sys.stderr.write ('Weekday overlaps month/day specification\n')
				sys.exit (1)
			wdi = weekdays.index (argi.lower ())
			back = 86400 * ((now_wd - wdi) % 7)
			(yr,mo,dy,hr,mn,sc,wd,jd,ds) = time.localtime (now - back)
			pattern [0] = yr
			pattern [1] = mo
			pattern [2] = dy
		elif len (argi) == 3:
			if pattern [1]:
				sys.stderr.write ('Multiple month specifications')
				sys.exit (1)
			try:
				argi = argi [0].upper () + argi [1:].lower ()
				pattern [1] = 1 + months.index (argi)
			except Exception, e:
				sys.stderr.write ('Bad month (' + str (e) + ')\n')
				sys.exit (1)
		else:
			try:
				pattern [2] = int (argi)
				if pattern [2] < 1 or pattern [2] > 31:
					raise Exception ('Bad day of the month')
			except Exception, e:
				sys.stderr.write ('Bad day of the month (' + str (e) + ')\n')
				sys.exit (1)
		if pattern [1] and not pattern [2]:
			pattern [2] = 1
		elif pattern [3] and not pattern [1]:
			yr = now_yr
			mo = now_mo
			dy = now_dy
			if pattern [3] > now_hr or (pattern [2] == now_hr and pattern [4] > now_mn):
				(yr,mo,dy,hr,mn,sc,wd,jd,ds) = time.localtime (now - 86400)
			pattern [0] = yr
			pattern [1] = mo
			pattern [2] = dy
	return pattern

patn_after  = timevalue (args.after )
patn_before = timevalue (args.before)

cmp_after  = [ patn_after  [i] for i in range (len (patn_after)) if patn_after [i] and patn_before [i] ]
cmp_before = [ patn_before [i] for i in range (len (patn_after)) if patn_after [i] and patn_before [i] ]
if cmp_after > cmp_before:
	sys.stderr.write ('Wrong order of --after ' + args.after + ' and --before ' + args.before + '\n')
	sys.exit (1)

time_ranges = [ (now_yr-1,now_yr), (1,12), (1,31), (0,23), (0,59), (0,59) ]

tsi_after  = [ patn_after  [i] or time_ranges [i][0] for i in range (len (patn_after )) ]
tsi_before = [ patn_before [i] or time_ranges [i][1] for i in range (len (patn_before)) ]

for (a,b,i) in zip (cmp_after,cmp_before,range (len (cmp_after))):
	if a is None:
		a = time_ranges [i][0]
	if b is None:
		b = time_ranges [i][1]
	time_ranges [i] = (a,b)
	if not a or not b or a != b:
		break

time_ranges = [ range (a,b+1) for (a,b) in time_ranges ]

#TODO# problems with DST, may lead to an hour extra (or, perhaps less)
if cmp_after != []:
	ts_after  = time.mktime ( (tsi_after [0],tsi_after [1],tsi_after [2],tsi_after [3],tsi_after [4],tsi_after [5],-1,-1,now_ds) )
else:
	ts_after = None

if cmp_before != []:
	ts_before = time.mktime ( (tsi_before[0],tsi_before[1],tsi_before[2],tsi_before[3],tsi_before[4],tsi_before[5],-1,-1,now_ds) )
else:
	ts_before = None


#
# Form regular expressions for the logfile lines
#

class Pattern:

	def __init__ (self, pattern):
		self.re = re.compile (pattern)

	def match (self, text):
		attempt = self.re.match (text)
		if attempt is not None:
			attempt = attempt.groups ()
		return attempt

#TODO# Produce patterns to preselect under arguments

re_netstat = re.compile ('(?:tcp|udp|sctp):[0-9]+')

use_month = [ months [mi-1] for mi in time_ranges [1] ]
re_month = '(' + '|'.join (use_month) + ')'
ky_month = ['month']

use_day = [ '%02d' % dy for dy in time_ranges [2] ]
re_day = '(' + '|'.join ( [str (d) for d in use_day ] ) + ')'
ky_day = ['day']

#TODO# Perhaps incorporate time here too (need to filter in any case)
use_hour = [ '%02d' % hr for hr in time_ranges [3] ]
use_min  = [ '%02d' % mn for mn in time_ranges [4] ]
use_sec  = [ '%02d' % sc for sc in time_ranges [5] ]
re_hour = '(?:' + '|'.join (use_hour) + ')'
re_min  = '(?:' + '|'.join (use_min ) + ')'
re_sec  = '(?:' + '|'.join (use_sec ) + ')'
re_time = '(' + re_hour + ':' + re_min + ':' + re_sec + ')'
ky_time = ['time']

re_tstamp = '((' + re_month + ' +' + re_day + ') ' + re_time + ')'
ky_tstamp = ['timestamp', 'date'] + ky_month + ky_day + ky_time

re_host = '([^ ]+)' if args.hostname is None else '(' + '|'.join (args.hostname) + ')'
ky_host = ['host']

use_pid = []
use_proc = []
for pid in args.pid:
	if pid [:1] == '/':
		pid = open (pid, 'r').read ().strip ()
	elif re_netstat.match (pid):
		sys.stderr.write ('No support yet for --pid ' + pid + '\n')
		sys.exit (1)
	if re_numeric.match (pid):
		use_pid.append (pid)
	else:
		use_proc.append (pid)
re_proc = '([^:]*[^:\]])' if use_proc == [] else '(' + '|'.join (use_proc) + ')'
re_pid = '(?:\[([0-9]+)\])?' if use_pid == [] else '\[(' + '|'.join (use_pid) + ')\]'
ky_proc = ['proc']
ky_pid = ['pid']

re_rest = '(.*)' if args.regexp is None else '(.*' + '.*|.*'.join (args.regexp) + '.*)'
ky_rest = ['logentry']

re_logline = re_tstamp + ' ' + re_host + ' ' + re_proc + re_pid + ': +' + re_rest + '\n'
ky_logline = ky_tstamp +       ky_host +       ky_proc + ky_pid +         ky_rest

#DEBUG# print 'REGEXP', re_logline

patn_logline = Pattern (re_logline)

if var_names is None:
	var_names = ky_logline

#
# Take in the lines and parse them one by one
#
# TODO: Open logfiles in parallel, keep listening, merge output based on timestamps
# TODO: Support filename extensions
# TODO: Support zipped logfile content
#

mod = wrmode_open ()
hdl = output_open (mod, var_names)
for lf in args.logfile:
	try:
		with open (lf) as lfh:
			for lfl in lfh.readlines ():
				logged =  patn_logline.match (lfl)
				if not logged:
					if args.verbose:
						sys.stderr.write ('Unrecognised line format: ', lfl)
						warning = True
					continue
				if ts_before or ts_after:
					#TODO# Internationalisation kills strptime() below
					#TODO# Year is uknown to strptime() below
					tm_logline = time.strptime (logged [0], '%b %d %H:%M:%S')
					tm_logline = (now_yr,tm_logline[1],tm_logline[2],tm_logline[3],tm_logline[4],tm_logline[5],tm_logline[6],tm_logline[7],tm_logline[8])
					if tm_logline > now_tm:
						tm_logline = (now_yr,tm_logline[1],tm_logline[2],tm_logline[3],tm_logline[4],tm_logline[5],tm_logline[6],tm_logline[7],tm_logline[8])
					#TODO# Again, DST may be interfering with good taste...
					ts_logline = time.mktime (tm_logline)
					if ts_after  and ts_logline < ts_after :
						continue
					if ts_before and ts_logline > ts_before:
						continue
				linevars = dict (zip (ky_logline, logged))
				linevars ['logline'] = lfl
				where = True
				for (var,val,eq) in conditions:
					#DEBUG# print 'WHERE', (var,val,eq)
					if eq is None:
						if where:
							break
						else:
							where = True
					elif not linevars.has_key (var):
						where = False
					elif (linevars [var] == val) != eq:
						where = False
				if where:
					#DEBUG# print linevars
					output_line (hdl, var_names, linevars)
	except Exception, e:
		sys.stderr.write ('Skipping non-accessible --logfile ' + lf + ' (' + str (e) + ')\n')
		warning = True
		pass
output_done (hdl)
wrmode_done (mod)

# Report any warning through the exit value
sys.exit (1 if warning else 0)

